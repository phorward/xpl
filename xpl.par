#!language              "C";

//Meta information
#parser                 "XPL";
#description            "eXample Programming Language";
#copyright              "In the public domain, 2011";
#version                "0.1";
#prefix                 "xpl";

#default action         [* @@ = @1; *];
#default epsilon action [* @@ = 0; *];


//Precedence and associativity
#left               "=";

#left               "=="
                    "!="
                    "<="
                    ">="
                    '>'
                    '<'
                    ;

#left               '+'
                    '-'
                    ;

#left               '*'
                    '/'
                    ;

//Regular expressions
@string<char*>      '"' !'"'* '"'               [* @@ = @>; *]
                    ;

@identifier<char*>  'A-Za-z_' 'A-Za-z0-9_'*     [* @@ = @>; *]
                    ;


//Lexemes
#lexeme             real
                    ;

real<float>         ->       real_integer '.' real_fraction

                            [*  @@ = @real_integer + @real_fraction; *]

                    |       real_integer '.'?

                            [*  @@ = @real_integer; *]

                    |       '.' real_fraction

                            [*  @@ = @real_fraction; *]
                    ;

real_integer<float> ->      real_integer '0-9':dig

                            [* @@ = 10 * @real_integer + @dig - '0'; *]

                    |       '0-9':dig
                    
                            [*  @@ = @dig - '0'; *]
                    ;
                    
real_fraction<float>->      real_fraction '0-9':dig
                            
                            [* @@ = ( @real_fraction - '0' + @dig ) / 10.0; *]

                    |       '0-9':dig
                    
                            [*  @@ = ( @dig - '0' ) / 10.0; *]
                    ;
                    
//Whitespace grammar construct
#whitespaces        whitespace
                    ;

whitespace          ->      ' \r\n\t'+
                    |       "//" !'\n'* '\n'
                    ;

//Goal symbol
program$            ->      statement*
                    ;

statement           ->      "if" '(' expression ')'
                             
                            (
                                [*
                                    @@ = xpl_emit( pcb->prog, XPL_JPC, 0 );
                                *]
                            ):jpc
                                
                                statement
                            
                            (
                                "else"

                                (
                                    [* 
                                        @@ = pcb->prog->program_cnt;
                                        xpl_emit( pcb->prog, XPL_JMP, 0 );
                                    *]
                                ):jmp

                                statement
                                
                                [* @@ = @jmp; *]
                                
                            |
                            
                                [* @@ = -1; *]
                            ):jmp
                            
                            [*
                                if( @jmp >= 0 )
                                {
                                    pcb->prog->program[ @jmp ].param =
                                        pcb->prog->program_cnt;
                                    pcb->prog->program[ @jpc ].param =
                                        @jmp + 1;
                                }
                                else
                                    pcb->prog->program[ @jpc ].param =
                                        pcb->prog->program_cnt;
                            *]

                    |       "while" 
                    
                            (
                                [*
                                    @@ = pcb->prog->program_cnt; 
                                *]
                            ):begin

                                '(' expression ')' 
                                
                            (
                                [*
                                    @@ = xpl_emit( pcb->prog, XPL_JPC, 0 ); 
                                *]
                            ):jpc
                                
                                statement
                                
                            [*
                                @@ = xpl_emit( pcb->prog, XPL_JMP, @begin );
                                pcb->prog->program[ @jpc ].param =
                                    pcb->prog->program_cnt;
                            *]
                    
                    |       '{' statement* '}'

                    |       expression ';'
                            [*
                                xpl_emit( pcb->prog, XPL_DRP, 0 );
                            *]

                    |       ';'
                    ;

expression          ->      variable "=" expression
                            [*
                                xpl_emit( pcb->prog, XPL_DUP, 0 );
                                xpl_emit( pcb->prog, XPL_STO, @variable );
                            *]

                    |       expression "==" expression
                            [*
                                xpl_emit( pcb->prog, XPL_EQU, 0 );
                            *]

                    |       expression "!=" expression
                    
                            [*
                                xpl_emit( pcb->prog, XPL_NEQ, 0 );
                            *]

                    |       expression '<' expression
                
                            [*
                                xpl_emit( pcb->prog, XPL_LOT, 0 );
                            *]

                    |       expression '>' expression
                    
                            [*
                                xpl_emit( pcb->prog, XPL_GRT, 0 );
                            *]

                    |       expression "<=" expression
                    
                            [*
                                xpl_emit( pcb->prog, XPL_LEQ, 0 );
                            *]

                    |       expression ">=" expression
                    
                            [*
                                xpl_emit( pcb->prog, XPL_GEQ, 0 );
                            *]

                    |       expression '+' expression
                    
                            [*
                                xpl_emit( pcb->prog, XPL_ADD, 0 );
                            *]

                    |       expression '-' expression
                    
                            [*
                                xpl_emit( pcb->prog, XPL_SUB, 0 );
                            *]

                    |       expression '*' expression

                            [*
                                xpl_emit( pcb->prog, XPL_MUL, 0 );
                            *]

                    |       expression '/' expression
                    
                            [*
                                xpl_emit( pcb->prog, XPL_DIV, 0 );
                            *]

                    |       '-' expression              
                    
                            [*
                                xpl_emit( pcb->prog, XPL_LIT,
                                    xpl_get_literal( pcb->prog,
                                        xpl_value_create_integer( -1 ) ) );
                                xpl_emit( pcb->prog, XPL_MUL, 0 );
                            *]
                            
                            #precedence '*'
                            
                    |       '(' expression ')'

                    |       real
                    
                            [*
                                xpl_emit( pcb->prog, XPL_LIT,
                                    xpl_get_literal( pcb->prog,
                                        xpl_value_create_float( @real ) ) );
                            *]
                            
                    |       @string
                    
                            [*
                                /* 
                                    Remove the quotation
                                    marks from the string 
                                */
                                @string[ strlen( @string ) - 1 ] = 0;
                                
                                /*
                                    Generate code
                                */
                                xpl_emit( pcb->prog, XPL_LIT,
                                    xpl_get_literal( pcb->prog,
                                        xpl_value_create_string(
                                            @string + 1, 1 ) ) );
                            *]
                            
                    |       variable
                            
                            [*
                                xpl_emit( pcb->prog, XPL_LOD,
                                    @variable );
                            *]
                            
                    |       function '(' parameter_list? ')'
                    
                            [*
								/*
									Semantic checks if the function
									parameters are in a valid count.
								*/
								if( xpl_check_function_parameters(
										@function, @parameter_list,
											pcb->line ) )
									pcb->error_count++;
                                
                                /* We first push the number of parameters */
                                xpl_emit( pcb->prog, XPL_LIT,
                                    xpl_get_literal( pcb->prog,
                                        xpl_value_create_integer(
                                            @parameter_list ) ) );
                                            
                                /* Then we call up the function */
                                xpl_emit( pcb->prog, XPL_CAL, @function );
                            *]
                    ;

parameter_list<int> ->      parameter_list ',' expression
                            [* @@ = @parameter_list + @expression; *]

                    |       expression
                    
                            [* @@ = 1; *]
                    ;

variable
function <int>    ->      @identifier

                            [*
                                if( ( @@ = xpl_get_function( @identifier ) )
                                        >= 0 )
                                    @!symbol:function;
                                else
                                    @@ = xpl_get_variable(
                                            pcb->prog, @identifier );
                            *]
                    ;

/* Parser Control Block */

#pcb
[*
xpl_program*    prog;
FILE*           input;
*];

/* Prologue & Epilogue */

#prologue
[*
#include "xpl.h"

extern xpl_fn   xpl_buildin_functions[];

#define UNICC_GETINPUT  fgetc( pcb->input )
*];

#epilogue
[*


int xpl_compile( xpl_program* prog, FILE* input )
{
    @@prefix_pcb    pcb;
    memset( &pcb, 0, sizeof( @@prefix_pcb ) );
    
    pcb.prog = prog;
    pcb.input = input;
    pcb.eof = EOF;
    
    @@prefix_parse( &pcb );
    
    return pcb.error_count;
}

*];
